//Leetcode Question 5 (longest Palindrome Substring)
public class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }

        int start = 0;
        int end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        int L = left;
        int R = right;

        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }

        return R - L - 1;
    }
}

//2nd method 
//Leetcode Question 5 Solution 

import java.util.Scanner;
public class strpalindrome {
    public static void main(String args[]) {
        String s, sn = "", s1, s2;
        int len, i, j;

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter A String:");
        s = sc.nextLine();
        len = s.length();

        for (i = len - 1; i >= 0; i--) {
            char c = s.charAt(i);
            sn = sn + c;
        }

        for (i = 2; i <= len; i++) {
            for (j = 0; j <= len - i; j++) {
                s1 = s.substring(j, j + i);
                s2 = new StringBuilder(s1).reverse().toString();
                if (s1.equals(s2)) {
                    System.out.println(s1);
                }
            }
        }
    }
}
